generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  // binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
  directUrl = env("DB_DIRECT")
}

model User {
  id           Int        @id @default(autoincrement())
  first_name   String
  last_name    String?
  email        String     @unique
  password     String
  phone_number String?
  city         String?
  gender       String
  dob          DateTime
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  is_verified  Boolean    @default(false)
  certificates List_certificate[]
  disabilities List_disability[]
  jobApplications Job_application[]
  skills       List_skill[]
}

model Company {
  id               Int               @id @default(autoincrement())
  name             String
  city             String
  about            String
  logo             String?
  picture          String?
  email            String
  password         String
  jobApplications  Job_application[]
  jobs             Job[]
}
model List_certificate {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  user        User      @relation(fields: [user_id], references: [id])
  user_id     Int
}

model Skill {
  id   Int    @id @default(autoincrement())
  name String
  users List_skill[]
  jobs List_job_skill[]
}

model List_disability {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [user_id], references: [id])
  user_id       Int
  disability    Disability  @relation(fields: [disability_id], references: [id])
  disability_id Int
}

model Job_application {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [user_id], references: [id])
  user_id    Int
  job        Job       @relation(fields: [job_id], references: [id])
  job_id     Int
  company    Company   @relation(fields: [company_id], references: [id])
  company_id Int
  status     String
}

model Disability {
  id          Int         @id @default(autoincrement())
  category    Category    @relation(fields: [category_id], references: [id])
  category_id Int
  name        String
  description String
  users       List_disability[]
}

model Ability {
  id   Int    @id @default(autoincrement())
  name String
  jobs Job[]
}

model List_skill {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [user_id], references: [id])
  user_id  Int
  skill    Skill  @relation(fields: [skill_id], references: [id])
  skill_id Int
}


model Category {
  id    Int    @id @default(autoincrement())
  name  String
  disabilities Disability[]
}

model List_job_skill {
  id       Int    @id @default(autoincrement())
  job      Job    @relation(fields: [job_id], references: [id])
  job_id   Int
  skill    Skill  @relation(fields: [skill_id], references: [id])
  skill_id Int
}

model Job {
  id               Int               @id @default(autoincrement())
  company          Company           @relation(fields: [company_id], references: [id])
  company_id       Int
  ability          Ability?          @relation(fields: [ability_id], references: [id])
  ability_id       Int?
  title            String
  description      String
  employment_type  String
  estimate_salary  Int?
  applications     Job_application[]
  skills           List_job_skill[]
}